// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  // profile
  company_name String
  fantasy_name String?
  cnpj         String   @unique
  email        String   @unique
  password     String
  segment      String
  userType     UserType

  // address
  cep          String?
  number       String?
  city         String?
  uf           String?
  neighborhood String?
  street       String?
  phone        String

  // relations
  employees  Employee[]
  gruops     Group[]
  challenges Challenge[]
}

enum UserType {
  COMPANY
  COMPANY_SERVICE
  PARTNER
}

// --> USER_TYPE = COMPANY

model Employee {
  id         Int  @id @default(autoincrement())
  playfab_id Int?

  // profile
  name       String
  email      String   @unique
  cpf        String   @unique
  birth_date DateTime
  sex        Sex
  url_img    Bytes?

  // relations
  activities Activity[]

  user_id  Int
  user     User  @relation(fields: [user_id], references: [id])
  group_id Int?
  group    Group? @relation(fields: [group_id], references: [id])

  // recorded
  recorded_at DateTime @default(now())
}

enum Sex {
  MALE
  FEMALE
  OTHER
}

// EMPLOYEE --> ACTIVITIES

model Activity {
  id Int @id @default(autoincrement())

  // profile
  time     Int
  distance Float
  rhythm   Float
  calories Float

  // relations
  employee_id Int
  employee    Employee @relation(fields: [employee_id], references: [id])


  // recorded
  date DateTime @default(now())
}

// COMPANYS --> CHALLENGES TO EMPLOYEES

model Challenge {
  id Int @id @default(autoincrement())

  // profile
  days       Int
  distance   Float
  url_img    Bytes?
  reward_msg String?
  expires_at DateTime
  type       ChallengeType

  // boolean
  has_started Boolean @default(false)
  has_reward  Boolean @default(false)

  // relations
  user_id Int
  user    User   @relation(fields: [user_id], references: [id])

  // recorded
  created_at DateTime @default(now())
}

enum ChallengeType {
  DISTANCE
  TIME
}

// USER_TYPE = COMPANY CAN CREATE GROUP TO EMPLOYEES

model Group {
  id      Int @id @default(autoincrement())

  name        String
  description String?
  url_img     Bytes?

  // relations
  members Employee[]
  
  user_id Int
  user   User   @relation(fields: [user_id], references: [id])
  
  // recorded
  recorded_at DateTime @default(now())
}
